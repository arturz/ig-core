{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Number$isNaN from \"@babel/runtime-corejs2/core-js/number/is-nan\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Artur\\\\Documents\\\\Node\\\\Insta\\\\www\\\\client\\\\pages\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Container, CssBaseline, Button, Typography, Avatar, Paper, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport MessageIcon from '@material-ui/icons/Message';\nimport fetch from 'isomorphic-unfetch';\nimport { useState, useEffect } from 'react';\nimport getServerUrl from '../config/getServerUrl';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      marginTop: theme.spacing(8),\n      marginBottom: theme.spacing(8),\n      padding: theme.spacing(2),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    avatar: {\n      backgroundColor: theme.palette.secondary.main,\n      margin: theme.spacing(1)\n    },\n    runButton: {\n      display: 'block',\n      margin: theme.spacing(2, 0, 2),\n      width: '100%'\n    },\n    list: {\n      display: 'flex',\n      flexDirection: 'column',\n      padding: theme.spacing(0, 1),\n      marginBottom: theme.spacing(1)\n    },\n    listButton: {\n      marginBottom: theme.spacing(1)\n    }\n  };\n});\nexport default (function () {\n  var _useState = useState(null),\n      running = _useState[0],\n      setRunning = _useState[1];\n\n  var _useState2 = useState([]),\n      supervisors = _useState2[0],\n      setSupervisors = _useState2[1];\n\n  var classes = useStyles({});\n  useEffect(function () {\n    var checkRunning =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _ref2, running;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"\".concat(getServerUrl(), \"/dev\"));\n\n              case 2:\n                _context.next = 4;\n                return _context.sent.json();\n\n              case 4:\n                _ref2 = _context.sent;\n                running = _ref2.running;\n                setRunning(running);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function checkRunning() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    checkRunning();\n  }, []);\n  useEffect(function () {\n    var updateSupervisors =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.t0 = setSupervisors;\n                _context2.next = 4;\n                return fetch(\"\".concat(getServerUrl(), \"/dev/supervisors\"));\n\n              case 4:\n                _context2.next = 6;\n                return _context2.sent.json();\n\n              case 6:\n                _context2.t1 = _context2.sent;\n                (0, _context2.t0)(_context2.t1);\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t2 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\");\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 10]]);\n      }));\n\n      return function updateSupervisors() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    updateSupervisors();\n  }, [running]);\n\n  var startBot =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(\"\".concat(getServerUrl(), \"/dev/start\"), {\n                method: 'POST'\n              });\n\n            case 2:\n              setRunning(true);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function startBot() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var exitBot = function exitBot() {\n    fetch(\"\".concat(getServerUrl(), \"/dev/exit\"), {\n      method: 'POST'\n    });\n    setRunning(false);\n  };\n\n  var execute = function execute(_ref5) {\n    var name = _ref5.name,\n        arity = _ref5.arity;\n    return (\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var payload, response, result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                payload = function () {\n                  if (arity === 0) return undefined;\n                  var arg = prompt('Podaj argument');\n                  if (_Number$isNaN(Number(arg))) return arg;\n                  return _parseInt(arg);\n                }();\n\n                _context4.next = 3;\n                return fetch(\"\".concat(getServerUrl(), \"/dev/execute\"), {\n                  method: 'POST',\n                  body: _JSON$stringify({\n                    type: name,\n                    payload: payload\n                  }),\n                  headers: {\n                    'Content-Type': 'application/json'\n                  }\n                });\n\n              case 3:\n                response = _context4.sent;\n                _context4.next = 6;\n                return response.text();\n\n              case 6:\n                result = _context4.sent;\n                if (result) alert(result);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))\n    );\n  };\n\n  return __jsx(React.Fragment, null, __jsx(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), __jsx(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(Avatar, {\n    className: classes.avatar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, __jsx(SettingsIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })), __jsx(Typography, {\n    variant: \"h5\",\n    component: \"h1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Panel sterowania\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, running === null ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.runButton,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Uruchom bota\") : running ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.runButton,\n    onClick: exitBot,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Wy\\u0142\\u0105cz bota\") : __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.runButton,\n    onClick: startBot,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Uruchom bota\")), supervisors.length !== 0 && __jsx(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    xs: true,\n    className: classes.list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"caption\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Opcje\"), supervisors.map(function (_ref7) {\n    var name = _ref7.name,\n        title = _ref7.title,\n        arity = _ref7.arity;\n    return __jsx(Button, _extends({\n      variant: \"contained\",\n      className: classes.listButton,\n      key: name,\n      onClick: execute({\n        name: name,\n        arity: arity\n      })\n    }, arity !== 0 && {\n      endIcon: __jsx(MessageIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      })\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), title);\n  }))))));\n});","map":{"version":3,"sources":["C:/Users/Artur/Documents/Node/Insta/www/client/pages/index.tsx"],"names":["Container","CssBaseline","Button","Typography","Avatar","Paper","Grid","makeStyles","SettingsIcon","MessageIcon","fetch","useState","useEffect","getServerUrl","useStyles","theme","paper","marginTop","spacing","marginBottom","padding","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","margin","runButton","width","list","listButton","running","setRunning","supervisors","setSupervisors","classes","checkRunning","json","updateSupervisors","startBot","method","exitBot","execute","name","arity","payload","undefined","arg","prompt","Number","body","type","headers","response","text","result","alert","length","map","title","endIcon"],"mappings":"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","sourcesContent":["import { Container, CssBaseline, Theme, Button, Typography, Avatar, Paper, Grid } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport MessageIcon from '@material-ui/icons/Message'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport { useState, useEffect } from 'react'\r\nimport getServerUrl from '../config/getServerUrl'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    marginBottom: theme.spacing(8),\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },  \r\n  avatar: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n    margin: theme.spacing(1)\r\n  },\r\n  runButton: {\r\n    display: 'block',\r\n    margin: theme.spacing(2, 0, 2),\r\n    width: '100%'\r\n  },\r\n  list: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    padding: theme.spacing(0, 1),\r\n    marginBottom: theme.spacing(1)\r\n  },\r\n  listButton: {\r\n    marginBottom: theme.spacing(1)\r\n  }\r\n}))\r\n\r\nexport default () => {\r\n  const [running, setRunning] = useState(null)\r\n  const [supervisors, setSupervisors] = useState([])\r\n  const classes = useStyles({})\r\n\r\n  useEffect(() => {\r\n    const checkRunning = async () => {\r\n      const { running } = await (await fetch(`${getServerUrl()}/dev`)).json()\r\n      setRunning(running)\r\n    }\r\n\r\n    checkRunning()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const updateSupervisors = async () => {\r\n      try {\r\n        setSupervisors(\r\n          await (await fetch(`${getServerUrl()}/dev/supervisors`)).json()\r\n        )\r\n      } catch(error){\r\n        return\r\n      }\r\n    }\r\n\r\n    updateSupervisors()\r\n  }, [running])\r\n\r\n  const startBot = async () => {\r\n    await fetch(`${getServerUrl()}/dev/start`, { method: 'POST' })\r\n    setRunning(true)\r\n  }\r\n\r\n  const exitBot = () => {\r\n    fetch(`${getServerUrl()}/dev/exit`, { method: 'POST' })\r\n    setRunning(false)\r\n  }\r\n\r\n  const execute = ({ name, arity }: { name: string, arity: number }) => async () => {\r\n    const payload = (() => {\r\n      if(arity === 0)\r\n        return undefined\r\n\r\n      const arg = prompt('Podaj argument')\r\n      if(Number.isNaN(Number(arg)))\r\n        return arg \r\n\r\n      return parseInt(arg)\r\n    })()\r\n\r\n    const response = await fetch(`${getServerUrl()}/dev/execute`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ type: name, payload }),\r\n      headers: { 'Content-Type': 'application/json' }\r\n    })\r\n    const result = await response.text()\r\n    if(result)\r\n      alert(result)\r\n  }\r\n\r\n  return ( \r\n    <>\r\n      <CssBaseline />\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <Paper className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <SettingsIcon />\r\n          </Avatar>\r\n          <Typography variant=\"h5\" component=\"h1\">\r\n            Panel sterowania\r\n          </Typography>\r\n          <div>\r\n          {\r\n            running === null\r\n              ? (\r\n                <Button variant=\"contained\" color=\"primary\" className={classes.runButton} disabled>\r\n                  Uruchom bota\r\n                </Button>\r\n              ) : running\r\n                ? (\r\n                  <Button variant=\"contained\" color=\"primary\" className={classes.runButton} onClick={exitBot}>\r\n                    Wyłącz bota\r\n                  </Button>\r\n                ) : (\r\n                  <Button variant=\"contained\" color=\"primary\" className={classes.runButton} onClick={startBot}>\r\n                    Uruchom bota\r\n                  </Button>\r\n                )\r\n          }\r\n          </div>\r\n          {\r\n            supervisors.length !== 0 && (\r\n              <Grid container>\r\n                <Grid item xs className={classes.list}>\r\n                  <Typography variant=\"caption\" gutterBottom>Opcje</Typography>\r\n                  {\r\n                    supervisors.map(({ name, title, arity }) =>\r\n                      <Button \r\n                        variant=\"contained\" \r\n                        className={classes.listButton} \r\n                        key={name} \r\n                        onClick={execute({ name, arity })}\r\n                        {...arity !== 0 && { endIcon: <MessageIcon /> }}\r\n                      >\r\n                      {\r\n                        title\r\n                      }\r\n                      </Button>\r\n                    )\r\n                  }\r\n                </Grid>\r\n              </Grid>\r\n            )\r\n          }\r\n        </Paper>\r\n      </Container>\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}